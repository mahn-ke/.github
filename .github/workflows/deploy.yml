# Required environment variables:
# - NGINX_HOME: Directory containing nginx.exe (https://nginx.org/)
# - ACME_HOME:  Directory containing wacs.exe (https://www.win-acme.com/)
# - CERT_HOME:  Directory containing certificates generated by ACME
#
# Required binaries/tools:
# - docker
# - docker compose

name: Deploy service, generate certificates, and update NGINX configuration

on:
  workflow_call:

jobs:
  prepare-postgres:
    runs-on: ubuntu-latest
    outputs:
      NEWDATABASE: ${{ steps.ensure-db.outputs.NEWDATABASE }}
    steps: 
      - name: Ensure database exists
        id: ensure-db
        env:
           PGHOST: ${{ secrets.PGHOST }}
           PGPORT: ${{ secrets.PGPORT }}
           PGUSER: ${{ secrets.PGUSER }}
           PGPASSWORD: ${{ secrets.PGPASSWORD }}
           PGDATABASE: "postgres"
        run: |
          REPO_NAME="$(basename "$GITHUB_REPOSITORY")"
          NEWDATABASE="$(echo "$REPO_NAME" | sed 's/-by-vincent//' | tr '-' '.')"
          echo "NEWDATABASE=$NEWDATABASE" >> $GITHUB_OUTPUT

          exists="$(psql -tAc "SELECT 1 FROM pg_database WHERE datname = '$NEWDATABASE'")"
          if [ "$exists" = "1" ]; then
            echo "Database '$NEWDATABASE' already exists."
            exit 0
          fi

          result=$(createdb "$NEWDATABASE")
          if [ $? -ne 0 ]; then
            echo "Failed to create database '$NEWDATABASE'."
            exit 1
          fi
          echo "Database '$NEWDATABASE' created."

  terraform-plan:
    needs: prepare-postgres
    runs-on: ubuntu-latest
    env:
      PGDATABASE: ${{ needs.prepare-postgres.outputs.NEWDATABASE }}
    outputs:
      exitcode: ${{ steps.plan.outputs.exitcode }}
      HAS_DOCKER_COMPOSE: ${{ steps.check-docker-compose.outputs.HAS_DOCKER_COMPOSE }}
    steps:
      - name: Expose github environment as shell variables
        env:
          SECRETS_CONTEXT: ${{ toJson(secrets) }}
        run: |
          # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-environment-variable
          # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-strings
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          to_envs() { jq -r "to_entries[] | \"\(.key)<<$EOF\n\(.value)\n$EOF\n\""; }
          echo "$SECRETS_CONTEXT" | to_envs >> $GITHUB_ENV
          
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - run: terraform version

      - run: terraform init

      - name: terraform plan
        id: plan
        continue-on-error: true
        run: | 
          terraform plan --out=tfplan --detailed-exitcode

      - name: Check if terraform apply is required
        run: |
          echo "exitcode: ${{ steps.plan.outputs.exitcode }}"
          if [ "${{ steps.plan.outputs.exitcode }}" == "0" ]; then
            echo "Configuration files found but no changes; skipping apply"
            exit 0
          fi
          
          if grep -q "No configuration files" <<<"${{ steps.plan.outputs.stderr }}"; then
            echo "No configuration files found; skipping apply"
            exit 0
          fi

          echo "Configuration files found and changes; running apply"

      - name: Upload Terraform plan
        if: steps.plan.outputs.exitcode == 2
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: tfplan

      - name: Check for docker-compose.yml
        id: check-docker-compose
        run: |
          if [ ! -f "docker-compose.yml" ]; then
            echo "HAS_DOCKER_COMPOSE=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "HAS_DOCKER_COMPOSE=true" >> $GITHUB_OUTPUT

  terraform-apply:
    runs-on: ubuntu-latest
    env:
      PGDATABASE: ${{ needs.prepare-postgres.outputs.NEWDATABASE }}
    environment: production
    needs: [prepare-postgres, terraform-plan]
    if: needs.terraform-plan.outputs.exitcode == 2
    steps:
      - name: Expose github environment as shell variables
        env:
          SECRETS_CONTEXT: ${{ toJson(secrets) }}
        run: |
          # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-environment-variable
          # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-strings
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          to_envs() { jq -r "to_entries[] | \"\(.key)<<$EOF\n\(.value)\n$EOF\n\""; }
          echo "$SECRETS_CONTEXT" | to_envs >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - run: terraform version
          
      - run: terraform init

      - name: Download Terraform plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan

      - run: terraform apply -auto-approve tfplan

  deploy:
    runs-on: hetzner2
    if: ${{ !cancelled() && needs.terraform-apply.outputs.HAS_DOCKER_COMPOSE == 'true' }}
    needs: [prepare-postgres, terraform-plan, terraform-apply]
    steps:
      - name: fail if any previous step failed
        if: needs.prepare-postgres.result == 'failure' || needs.terraform-plan.result == 'failure' || needs.terraform-apply.result == 'failure'
        run: exit 1

      - name: Expose github environment as shell variables
        env:
          SECRETS_CONTEXT: ${{ toJson(secrets) }}
        run: |
          # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-environment-variable
          # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-strings
          $EOF = [System.Guid]::NewGuid().ToString("N").Substring(0,16)
          $secrets = $env:SECRETS_CONTEXT | ConvertFrom-Json
          foreach ($pair in $secrets.PSObject.Properties) {
            Add-Content -Path $env:GITHUB_ENV -Value "$($pair.Name)<<$EOF`n$($pair.Value)`n$EOF"
          }

      - name: Checkout current repository to src (with submodules)
        uses: actions/checkout@v4
        with:
          path: src
          submodules: recursive

      - name: Checkout mahn-ke/.github to workflow
        uses: actions/checkout@v4
        with:
          repository: mahn-ke/.github
          path: workflow 
      
      - name: Check versions
        run: | 
          docker version
          docker compose version
          nginx -v
        working-directory: src

      - name: Run Docker Compose
        env:
          COMPOSE_PROJECT_NAME: ${{ needs.prepare-postgres.outputs.NEWDATABASE }}
        run: docker compose up -d
        working-directory: src

      - name: Attempt subomain deployment, if required
        run: ../workflow/tools/Deploy.ps1
        shell: pwsh
        working-directory: src
