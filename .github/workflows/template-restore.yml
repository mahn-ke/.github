          # Find volumes to restore
          docker compose config | Out-File -FilePath config.yml -Encoding utf8
          $mappings = docker run --rm -v "${PWD}:/workdir" mikefarah/yq ".services[].volumes[].source" config.yml
          $unique_mappings = $mappings | Sort-Object | Get-Unique
          $volumes = $unique_mappings | Where-Object { $_ -notmatch '[\\/]' }
          Add-Content -Path $env:GITHUB_OUTPUT -Value "VOLUMES=$($volumes -join ',')"
          Write-Host "Volumes to restore:`n$($volumes -join "`n")"

          # Find snapshots to restore from
          $repo = "$env:RESTIC_REPOSITORY"
          $date = "${{ github.event.inputs.date }}"
          $tag = "${{ github.event.inputs.tag }}"

          $snapshotsByVolume = @{}
          $selectedSnapshotsByVolume = @{}
          foreach ($volume in $volumes) {
            $snapshotsByVolume[$volume] = restic -r $repo snapshots --path "/$volume" --json | ConvertFrom-Json
            if ($tag) {
              $filtered = $snapshotsByVolume[$volume] | Where-Object { $_.tags -contains $tag }
              $snapshot = $filtered | Sort-Object -Property time -Descending | Select-Object -First 1
              Write-Host "Using snapshot id $($snapshot.short_id) with tag $tag for volume $(($env:PROJECT_NAME))_${volume} ($($snapshot.time)) (tags: $($snapshot.tags -join ', ')))"
              $selectedSnapshotsByVolume[$volume] = $snapshot
              continue
            }

            if ($date) {
              $target = [datetime]::Parse($date)
              $snapshot = $snapshotsByVolume[$volume] | Sort-Object { [datetime]$_.time } | `
              Where-Object { [datetime]$_.time -le $target } | Select-Object -Last 1
              Write-Host "Using snapshot id $($snapshot.short_id) closest to $date for volume $(($env:PROJECT_NAME))_${volume} ($($snapshot.time)) (tags: $($snapshot.tags -join ', '))"
              $selectedSnapshotsByVolume[$volume] = $snapshot
              continue
            }

            Write-Host "No matching snapshot found for volume $(($env:PROJECT_NAME))_${volume}"
          }

          $latestSnapshot = $selectedSnapshotsByVolume.Values | Sort-Object { [datetime]$_.time } | Select-Object -Last 1
          if (!$latestSnapshot) {
            Write-Host "At least one snapshot must be found matching the tag; exiting"
            exit 1
          }
          
          $missingVolumes = $volumes | Where-Object { -not $selectedSnapshotsByVolume.ContainsKey($_) }
          foreach ($mv in $missingVolumes) {
            Write-Host "Finding closest snapshot for volume $(($env:PROJECT_NAME))_${mv}."
            $snapshots = restic -r $repo snapshots --path "/$mv" --json | ConvertFrom-Json
            $snapshot = $snapshots | Sort-Object { [datetime]$_.time } | Where-Object { [datetime]$_.time -le [datetime]$($latestSnapshot.time) } | Select-Object -Last 1
            if (-not $snapshot) {
              Write-Host "No snapshot found for volume $(($env:PROJECT_NAME))_${mv} before $($latestSnapshot.time); exiting"
              exit 2
            }

            Write-Host "Using snapshot id $($snapshot.short_id) closest to latestSnapshot ($($latestSnapshot.time)) for volume $(($env:PROJECT_NAME))_${mv} ($($snapshot.time)) (tags: $($snapshot.tags -join ', '))"
            $selectedSnapshotsByVolume[$mv] = $snapshot
          }

          # for all volumes, print all available snapshot ID and time, and prefix selected with `>`
          foreach ($volume in $volumes) {
            Write-Host "------------------------------"
            Write-Host "Available snapshots for volume $(($env:PROJECT_NAME))_${volume}:"
            foreach ($s in $snapshotsByVolume[$volume] | Sort-Object { [datetime]$_.time }) {
              if ($s.short_id -eq $selectedSnapshotsByVolume[$volume].short_id) {
                Write-Host "> $($s.short_id) $($s.time) (tags: $($s.tags -join ', '))"
              } else {
                Write-Host "  $($s.short_id) $($s.time) (tags: $($s.tags -join ', '))"
              }
            }
          }

          Add-Content -Path $env:GITHUB_OUTPUT -Value "SNAPSHOTS=$($snapshot_ids -join ',')"
          Add-Content -Path $env:GITHUB_OUTPUT -Value "TIMESTAMP=$(Get-Date -Format 'yyyyMMdd-HHmmss')"
          exit 2 #deliberately fail workflow
